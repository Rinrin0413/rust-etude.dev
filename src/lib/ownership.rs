#![allow(unused)] // 変数とか使わなくても怒られないやつ
// DOC.4-1
 // 所有権とは
    // 所有権はメモリを安全に扱うための Rust の機能

   // スタックとヒープ
    // 所有権を学ぶ上でスタックは必要な知識

    // スタックは使用できるメモリの1つ
    // 新しく値を得ると古い値は排除される故高速に処理される

    // ヒープも使用できるメモリの1つ
    // データ(値など)を置くときにスペースを求め、OS が空の領域を見つけてポインタ(アドレス)を返す

   // 所有権規則
    // 所有権を使う中でこれらのルールに応じなさい
    // 1.Rustの各値は、所有者と呼ばれる変数と対応している。
    // 2.いかなる時も所有者は一つである。
    // 3.所有者がスコープから外れたら、値は破棄される。

pub fn val_and_scope() {
   // 変数スコープ
    // 疑似的なスコープ( {} )を作って説明します
    {
        // <- s はまだ定義されていない為使えない
        let val = "あたい"; // val が定義されたので使用可能に
        println!("{}", val); // val で作業をする...
    } // このスコープは終わった為 val は使えない
    // つまり、val がスコープに入ると有効に、スコープを抜けるまで有効なままである
}