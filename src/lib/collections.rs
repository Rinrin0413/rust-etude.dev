#![allow(unused)]
    // std にはコレクションという非常に有益なデータ構造を含んでいる
    // コレクションは複数の値を含むことができる
    // 組み込みの配列とタプル型とは違いコレクションのデータはヒープに確保されていて
    // データ量はコンパイル時にわかる必要はなく伸縮可能である
    // 各コレクションには異なる能力とコストが存在し様々な場面においてどれを使うべきかの判断力は軽々とともに育んでいきます
    // ここでは頻繁に使用される3つのコレクションについて紹介する
    //    ベクタ型 : 可変長(伸縮可能)な値を並べて保持できる。
    //    文字列 : 文字のコレクション。以前 String型について触れたがさらに詳しく掘り下げる。
    //    ハッシュマップ : 値を特定のキーと紐付けさせることが出来るより一般的なデータ構造。マップの特定の実装である。
    // 他のコレクションについて学ぶにはドキュメント参照
    // ベクタ型, 文字列, ハッシュマップの生成と更新方法や各々の特徴について学んでいきましょう

pub fn vector() {
  // ベクタで一連の値を保持する
    // 最初に見るコレクションは Vec<T> です
    // ベクタとも言いメモリ上に値を隣り合わせに並べる単独のデータ構造に2つ以上の値を保持させてくれる
    // ベクタには同じ型の値しか保持できない、要素のリストがある場合に有用
    // 例えばテキストファイルの各行やショッピングカートのアイテムの価格など

   // 新しいベクタを生成する
    // 新しい空のベクタを作るには Vec:new関数 を使う
    let v:Vec<i32> = Vec::new();
    // 値が何もないので型がわかるように注釈します

    // ベクタはジェネリクスを使用して実装されてる
    // 独自の型でジェネリクスを使用する方法についてはいずれ学ぶ
    // 今は std により提供されている Vec<T>型はどんな型でも保持でき、ベクタが特定の型を保持するとその型は <>内に指定されるということだけが分かれば良い
    // 一旦値を挿入したらコンパイラは保持させたい値の型を推論し続けられるので、このように型注釈をすることは滅多にない
    // 初期値のある Vec<T> を生成する方が一般的ですし Rust には vec!マクロも用意されている
    // vec!マクロは与えた値を保持する新しいベクタ型を生成します
	// 以下では 1, 2, 3 を持つ新しい Vec<i32> を生成している
	let v = vec![1, 2, 3];
	// 初期値として i32値を指定したのでコンパイラは v の型が Vec<i32> であると推論でき、型注釈は必要なくなる

   // ベクタを更新する
	// pushメソッドで要素を追加できます
	// もちろん値の改変には mut キーワードでの定義が必要です
	// 中に配置する数値は全てi32型であることをコンパイラをデータから推論するので Vec<i32> という注釈は必要なくなる
	let mut rgb = Vec::new();
	rgb.push(255);
	rgb.push(172);
	rgb.push(86);

   // ベクタをドロップすれば要素もドロップする
	// ベクタもスコープを抜ければ解放される
	{
		let test_vec = vec![1, 2, 3, 4];
		// ここでは test_vec は使用可能
	} // test_vec はここでスコープを抜けて解放される

	// ベクタがドロップされると中身もドロップされる。つまり保持されていた値が片付けられるということ
	// 一見単純なこと見えるかもしれないがベクタの要素への参照を導入した場合、少し複雑になるかもしれない

   // ベクタの要素を読む
	// 生成, 更新, 破棄 ができても使えなければ意味がない
	// 中身を読む方法は2種類在ります
	// 以下の例では分かりやすくする為に関数の返り値の型を注釈します
	// 以下は両メソッドがベクタの値に対して添字記法と getメソッドによりアクセスするところです
	let g:&i32 = &rgb[1]; // rgb[1] を g が借用する
	let g_ii:Option<&i32> = rgb.get(1); // 指数を引数として getメソッドに渡し Option<&T> を得る

	// ベクタに要素が含まれないインデックスの値を使用しようとした際プログラムの振る舞いを選択できる
	//let does_not_exist = &rgb[100]; // エラー
	// getメソッドがベクタ外の添え字を渡されると、パニックすることなくNoneを返します
	let offl = rgb.get(100);
	println!("{:?}", offl);//< None
	// ベクタの範囲外にアクセスする可能性がある場合にこのメソッドを使用することになる
	// そうしたらコードには Some(&element) か None を扱うロジックが存在することになる
	// 例えば人の入力した数値を input して添え字(インデックスとして)に入れることもできる
	// もし大きすぎる値を誤って入力してもプログラムが None値を得るので、それに応じて再度質問するようにできる

	// レかレ！
	let mut v_ii = vec![1, 2, 3, 4, 5]; 
	let first = &v_ii[0];
	v_ii.push(6);
	//println!("{:?}", first); // これはエラー
	// なぜ最初の要素への参照がベクタの終端への値追加に干渉されるのでしょう
	// 新規要素をベクタの終端に追加すると新しく追加する値分の領域を用意する必要がある(場合がある)
	// メモリの新規確保をして古い要素を新しいスペースにコピーすることになる
	// 移転されてしまっているので最初の要素を指す参照は解放されたメモリを指してしまう
	// エラーとなります

   // ベクタの値を走査する
	// ベクタの要素に順番にアクセスしたいなら添え字で1回に1要素にアクセスするのではなく全要素を走査することができます
	// 例えば以下だけで可能です
	let v_iii = vec![100, 32, 57];
	for i in &v_iii { println!("{}", i); }

	// 全要素に変更を加える目的で可変なベクタの各要素への可変な参照を走査することもできる
	// 以下では全要素に 50 を加算している
	let mut v_iv = vec![100, 32, 57];
	for i in &mut v_iv { *i += 50; }
	// 可変参照が参照している値を変更するには +=演算子を使用する前に参照外し演算子(*)を使用して i の値に辿り着かないといけない
}