#![allow(unused)]
    // std にはコレクションという非常に有益なデータ構造を含んでいる
    // コレクションは複数の値を含むことができる
    // 組み込みの配列とタプル型とは違いコレクションのデータはヒープに確保されていて
    // データ量はコンパイル時にわかる必要はなく伸縮可能である
    // 各コレクションには異なる能力とコストが存在し様々な場面においてどれを使うべきかの判断力は軽々とともに育んでいきます
    // ここでは頻繁に使用される3つのコレクションについて紹介する
    //    ベクタ型 : 可変長(伸縮可能)な値を並べて保持できる。
    //    文字列 : 文字のコレクション。以前 String型について触れたがさらに詳しく掘り下げる。
    //    ハッシュマップ : 値を特定のキーと紐付けさせることが出来るより一般的なデータ構造。マップの特定の実装である。
    // 他のコレクションについて学ぶにはドキュメント参照
    // ベクタ型, 文字列, ハッシュマップの生成と更新方法や各々の特徴について学んでいきましょう

pub fn vector() {
  // ベクタで一連の値を保持する
    // 最初に見るコレクションは Vec<T> です
    // ベクタとも言いメモリ上に値を隣り合わせに並べる単独のデータ構造に2つ以上の値を保持させてくれる
    // ベクタには同じ型の値しか保持できない、要素のリストがある場合に有用
    // 例えばテキストファイルの各行やショッピングカートのアイテムの価格など

   // 新しいベクタを生成する
    // 新しい空のベクタを作るには Vec:new関数 を使う
    let v:Vec<i32> = Vec::new();
    // 値が何もないので型がわかるように注釈します

    // ベクタはジェネリクスを使用して実装されてる
    // 独自の型でジェネリクスを使用する方法についてはいずれ学ぶ
    // 今は std により提供されている Vec<T>型はどんな型でも保持でき、ベクタが特定の型を保持するとその型は <>内に指定されるということだけが分かれば良い
    // 一旦値を挿入したらコンパイラは保持させたい値の型を推論し続けられるので、このように型注釈をすることは滅多にない
    // 初期値のある Vec<T> を生成する方が一般的ですし Rust には vec!マクロも用意されている
    // vec!マクロは与えた値を保持する新しいベクタ型を生成します
	// 以下では 1, 2, 3 を持つ新しい Vec<i32> を生成している
	let v = vec![1, 2, 3];
	// 初期値として i32値を指定したのでコンパイラは v の型が Vec<i32> であると推論でき、型注釈は必要なくなる

   // ベクタを更新する
	// pushメソッドで要素を追加できます
	// もちろん値の改変には mut キーワードでの定義が必要です
	// 中に配置する数値は全てi32型であることをコンパイラをデータから推論するので Vec<i32> という注釈は必要なくなる
	let mut rgb = Vec::new();
	rgb.push(255);
	rgb.push(172);
	rgb.push(86);

   // ベクタをドロップすれば要素もドロップする
	// ベクタもスコープを抜ければ解放される
	{
		let test_vec = vec![1, 2, 3, 4];
		// ここでは test_vec は使用可能
	} // test_vec はここでスコープを抜けて解放される

	// ベクタがドロップされると中身もドロップされる。つまり保持されていた値が片付けられるということ
	// 一見単純なこと見えるかもしれないがベクタの要素への参照を導入した場合、少し複雑になるかもしれない

   // ベクタの要素を読む
	// 生成, 更新, 破棄 ができても使えなければ意味がない
	// 中身を読む方法は2種類在ります
	// 以下の例では分かりやすくする為に関数の返り値の型を注釈します
	// 以下は両メソッドがベクタの値に対して添字記法と getメソッドによりアクセスするところです
	let g:&i32 = &rgb[1]; // rgb[1] を g が借用する
	let g_ii:Option<&i32> = rgb.get(1); // 指数を引数として getメソッドに渡し Option<&T> を得る

	// ベクタに要素が含まれないインデックスの値を使用しようとした際プログラムの振る舞いを選択できる
	//let does_not_exist = &rgb[100]; // エラー
	// getメソッドがベクタ外の添え字を渡されると、パニックすることなくNoneを返します
	let offl = rgb.get(100);
	println!("{:?}", offl);//< None
	// ベクタの範囲外にアクセスする可能性がある場合にこのメソッドを使用することになる
	// そうしたらコードには Some(&element) か None を扱うロジックが存在することになる
	// 例えば人の入力した数値を input して添え字(インデックスとして)に入れることもできる
	// もし大きすぎる値を誤って入力してもプログラムが None値を得るので、それに応じて再度質問するようにできる

	// レかレ！
	let mut v_ii = vec![1, 2, 3, 4, 5]; 
	let first = &v_ii[0];
	v_ii.push(6);
	//println!("{:?}", first); // これはエラー
	// なぜ最初の要素への参照がベクタの終端への値追加に干渉されるのでしょう
	// 新規要素をベクタの終端に追加すると新しく追加する値分の領域を用意する必要がある(場合がある)
	// メモリの新規確保をして古い要素を新しいスペースにコピーすることになる
	// 移転されてしまっているので最初の要素を指す参照は解放されたメモリを指してしまう
	// エラーとなります

   // ベクタの値を走査する
	// ベクタの要素に順番にアクセスしたいなら添え字で1回に1要素にアクセスするのではなく全要素を走査することができます
	// 例えば以下だけで可能です
	let v_iii = vec![100, 32, 57];
	for i in &v_iii { println!("{}", i); }

	// 全要素に変更を加える目的で可変なベクタの各要素への可変な参照を走査することもできる
	// 以下では全要素に 50 を加算している
	let mut v_iv = vec![100, 32, 57];
	for i in &mut v_iv { *i += 50; }
	// 可変参照が参照している値を変更するには +=演算子を使用する前に参照外し演算子(*)を使用して i の値に辿り着かないといけない

   // Enumを使って複数の型を保持する
	// ベクタは同じ型の値しか保持できない
	// しかし enum の列挙子は同じ enum の型の元に定義される故ベクタに異なる型の要素を持たせたいなら enum を使用するとよい
	enum SpreadsheetCell {
		Int(i32),
		Float(f64),
		Text(String),
	}
	let row = vec![
		SpreadsheetCell::Int(3),
		SpreadsheetCell::Text(String::from("blue")),
		SpreadsheetCell::Float(10.12),
	];
	// rowベクタの中身は全て SpreadsheetCell型となる
	// 列挙子は違うため別の型を保持できる
}

pub fn string() {
 // 文字列でUTF-8でエンコードされたテキストを保持する
	// 生成, 更新, 読込など他のコレクションも持っている様なStringの処理について学ぶ
	// また String が他のコレクションと異なる点についても学ぶ

  // 文字列とは?
	// 文字列リテラルはプログラムのバイナリ出力に格納され、バイナリのその特定の位置を指すスライスなので文字列スライスになる
	// String型は std により提供されいるが 伸長可能, 可変, 所有権のある UTF-8エンコードされた文字列型です
	// Rust において「文字列」は どちらかではなく String と&str(文字列スライス)のことを指す
	// また std には他の文字列型も含まれている 例 OsString, OsStr, CString, CStr etc...
	// それらの名前が全て String か Str で終わっているのは、所有権ありと借用されたバージョンを指している

  // 新規文字列を生成する
	// Vec<T> で出来る処理の殆どが String でも使える
	// 空の文字列の生成は　String:new関数です
	let mut s = String::new();

	// to_stringメソッドで文字列の初期値を決める
	let data = "初期値!";
	let s_ii = data.to_string();
	
	// 文字列リテラルに直接連結も可能
	let s_iii = "初期値!".to_string();

	// String::from関数でも同じようなことが可能
	let s_iv = String::from("初期値!");

	// 文字列は色々な所で使うので多くの異なる API が用意されていて、たくさんの選択肢がある
	// 文字列は UTF-8エンコードされているので以下の文字は全て有効です
	let hello_ar = String::from("السلام عليكم");
	let hello_cs = String::from("Dobrý den");
	let hello_en = String::from("Hello");
	let hello_hb = String::from("שָׁלוֹם");
	let hello_ay = String::from("贵樣");
	let hello_hi = String::from("नमस्ते");
	let hello_ja = String::from("こんにちは");
	let hello_ko = String::from("안녕하세요");
	let hello_zh = String::from("你好");
	let hello_pt = String::from("Olá");
	let hello_ru = String::from("Здравствуйте");
	let hello_spa = String::from("Hola");

  // 文字列を更新する
	// String はサイズを伸ばすことができ Vec<T> の中身のように追加のデータをプッシュすれば中身も変化する
	// つまり String値を連結する +演算子や format!マクロを使用することができるということ

   // 1.push_str と push で文字列に追加する
	// push_strメソッドで文字列スライスを追記することで String を伸ばすことができる
	let mut yushu = String::from("优秀の");
	yushu.push_str("人材");
	println!("{}", yushu); //< 优秀の人材

    // なお、push_str関数に値を利用されても所有権は奪われません
	let mut tapioka = String::from("夕匕オ力に");
	let towshi = "投資ずゑ";
	tapioka.push_str(towshi); // towshi はまだ使える
	println!("{}", tapioka); //< 夕匕オ力に投資ずゑ
	
	// pushメソッドでは char型で追加できます
	let mut kisama = String::from("贵");
	kisama.push('樣'); // char型なのでシングルクォート
	println!("{}", kisama);

   // 2.+演算子または format!マクロで連結
	// 2つの文字列(String)を組み合わせたい場合は +演算子で連結できる
	let hello = String::from("Hello, ");
	let world = String::from("World!");
	let h_w = hello + &world; // hello はムーブされて使えなくなる
	println!("{}", h_w); //< Hello, world!
	// +演算子(addメソッドで定義されている)では足す数(右)が &String でも &str に型強制する(関数の引数の仕様)
	// その後コンパイラは参照外し型強制をして &world を &world[..] に、つまり文字列スライスにします
	// 参照外し型強制についてはいずれ学ぶ
	// +演算子が引数の所有権を奪わないので world は引き続き使える
	// しかし足される数(左)の所有権は奪います
	// メソッドの引数部分の self に & がついていないからです
	// つまり上の +演算子による計算では hello の値を奪って world　の値をコピーして連結していることになる

	// 複数の文字列を連結しようとすると +演算子のこの仕様は面倒くさくなってきます
	let sin = String::from("sine");
	let cos = String::from("cosine");
	let tan = String::from("tangent");
	let trig_fn = sin + "-" + &cos + "-" + &tan;
	println!("{}", trig_fn); //< sine-cosine-tangent
	// 非常に見ずらいです

	// このような複雑な連結には format!マクロが有用
	// println!マクロのように使えますがスクリーン出力ではなく中身を String　で返す
	// 引数の所有権を奪わない上に見やすいです
	let sin_ii = String::from("sine"); // sin変数だけ死んでるので再定義
	let trig_fn_ii = format!("{}-{}-{}", sin_ii, cos, tan);
	println!("{}", trig_fn_ii); //< sine-cosine-tangent

  // 文字列に添え字アクセスする
	// 他の多くのプログラミング言語では文字列中の文字に添え字で参照してアクセスすることが出来きます
	// しかし Rust では添え字記法で String の一部にアクセスしようとするとエラる
	let reima = String::from("Makidmo");
	//let h = reima[0]; // エラー
	// これは Rust のメモリでの文字列保持方法によるもの

   // 内部表現
	// String は Vec<u8> のラッパ。
	// まずは下を見てください
	let len = String::from("Hola").len(); //< len=4
	// 文字列"Hola"を保持するベクタの長さが 4バイト(各文字1バイト)であるため len に 3 を代入する

	// しかし下はどうでしょう
	let len = String::from("Здравствуйте").len(); //< len=24
	// この文字列の先頭はアラビア算用数字の3ではなくキリル文字です
	// この文字列の長さは 24 です。1文字が1バイトとは限らない
	// それ故に文字列のバイトの添え字は必ずしも有効な Unicodeのスカラー値とは相互に関係しない

	// 以下も見てみましょう
	let hello = "Здравствуйте";
	//let answer = &hello[0]; //エラー
	// 添え字0で参照しようとするとなぜエラーなのか
	// UTF-8エンコードされた時にЗ(基本ラテン文字)の最初のバイトは208, 2番目は151になる故
	// answer変数は本来208になって欲しいところが 208 は単独では有効な文字ではない
	// この文字列の最初の文字を求めている場合は 208 を返すことはユーザの望んでいるものではないはず
	// しかし Rust にはバイト添え字0の位置には 208 しかない
	// 文字列がラテン文字のみを含む場合でもユーザはバイト値が返ることを望まないはず
	// &"hello"[0] がバイト値を返す有効なコードだったら、hではなく、104を返す
	// 予期しない値を返し気付きずらいバグを起こさないために Rust はコンパイルせずにエラーで止めてくれる

  // バイトとスカラー値と書記素クラスタ！wtf
	// UTF-8 についての別の特徴として Rust において文字列を見るには3つの関連した方法があるということ
	// バイトとして, スカラー値として, そして書記素クラスタ(人間が文字と呼ぶものに一番近い)としてです
	// ヒンディー語の単語 नमस्ते をデーヴァナーガリー(サンスクリット語とヒンディー語を書くときに使われる書記法)で表記したものを見たら
	// 以下のような見た目のu8値のベクタとして保持される
	// [224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164, 224, 165, 135]
	// 18バイトになりこのようにコンピュータは最終的にこのデータを保持している

	// Unicodeスカラー値として見たら( Rust の char型もこれこのバイトは以下のような見た目になる
	// ['न', 'म', 'स', '्', 'त', 'े']
	// ここでは 6つ char値がありますが 4番目と 6番目は文字ではありません(単独では意味をなさないダイアクリティック)

	// 最後に書記素クラスタとして見たらこのヒンディー語の単語を使う人が 4文字と呼ぶであろうものが得られる
	// ["न", "म", "स्", "ते"]

	// Rustにはデータが表す自然言語だけでなく各プログラムが必要な解釈方法を選べるよう、
	// コンピュータが保持する raw の文字列データを解釈する方法がいろいろ用意されている

	// Rust で文字を得るのに String に添え字アクセスできない最後の理由は
	// 添え字アクセスという処理が常に定数時間(O(1))になると期待されるから
	// しかし String でその処理を保証することはできない。
	// というのも 合法な文字がいくつあるか決定するのに最初から添え字まで中身を走査する必要がある故

  // 文字列をスライスする
	// 文字列への添え字アクセスはしばしば悪い考えとなる
	// 文字列添え字処理の戻り値の型が明瞭ではないから
	// なりうる値が バイト値, 文字, 書記素クラスタ, 文字列スライス など沢山あるからですね

	// 故に文字列スライスを生成する時に添え字を使う必要が出た場合、
	// コンパイラがもっと特定するよう求めてくる。添え字アクセスを特定して文字列スライスが欲しいと示唆するためには、
	// []で1つの数値により添え字アクセスするのではなく範囲とともに[]を使って特定のバイトを含む文字列スライスを作ることができる
	let hello_ii = "Здравствуйте";
	let sadon = &hello_ii[0..4]; // hello_ii の文字は各2バイトなので4バイト分スライス
	println!("{}", sadon); //< Зд
	// &hello[0..1] とやると文字をぶった切る事になるのでエラー

  // 文字列を走査するメソッド群
	// 他の方法でも文字列の要素にアクセスすることができる
	// もし個々のUnicodeスカラー値に対して処理を行いたかったら charsメソッドを使用すると良い
	// नमस्ते に対して charsメソッドを呼び出したら分解して 6つの char型の値を返します
	let dada = "नमस्ते".chars();
	println!("{:?}", dada); //< Chars(['न', 'म', 'स', '\u{94d}', 'त', '\u{947}'])
	// 走査で1つ1つ出せる
	for c in dada { println!("{}", c); } //< न
										 //...म
										 //...स
										 //...्
										 //...त
										 //...े

	// bytesメソッドは各バイトをそのまま返す
	for b in "नमस्ते".bytes() { println!("{}", b); } //< 224
												   //...164
												   //-略
												   //...165
												   //...135
	
	// 計18バイトを返す
}