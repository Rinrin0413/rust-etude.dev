#![allow(unused)] // 未使用変数とかの許可定期

    // 関係した機能をまとめたり異なる特徴を持つコードを分割すると、目的のコードを見つけたり機能を変更したりする際に便利です
    // パッケージは複数のバイナリクレートからなり、ライブラリクレートを1つもつこともできます
    // パッケージが肥大化したら一部を抜き出して分離したクレートにし、外部依存とするのもよい

    // パス : 要素(例えば構造体や関数やモジュール)に名前をつける方法
    // モジュール & use : これを使うことでパスの構成, スコープ, 公開するか否かを決定できます
    // クレート : ライブラリか実行可能ファイルを生成する、木構造をしたモジュール群
    // パッケージ : クレートをビルドし、テストし、共有することができるCargoの機能

// packages_and_crate {
   // パッケージとクレート
    // クレートはバイナリかライブラリのどちらかです
    // クレートルート(crate root) とはコンパイラの開始点となりクレートのルートモジュールを作るソースファイルとなります
    // パッケージはある機能群を提供する1つ以上のクレートです
    // パッケージはそれらのクレートをどのようにビルドするかを説明するファイル( Cargo.toml )を持っています
    // そしてパッケージは0か1個のライブラリクレートを持っていないといけないが、バイナリクレートはいくらでも持って良い
    // 少なくとも1つのクレート(libクレbinクレどちらでもよい) を持っていないといけない

    // 以下のプロジェクト構成の場合
    // ---------------
    // shogee
    //  ├ src
    //  |  └ main.rs
    //  └ Cargo.toml
    // ---------------
    // このパッケージには  src/main.rs しか含まれていなくて shogee というバイナリクレートしか持っていないことになる
    // src/lib.rs を持っていたらクレートは2つになり、どちらもパッケージと同じ名前を持つlibクレとbinクレとなります
    // そしてファイルを src/bin配下に置くことでパッケージは複数のバイナリクレートを持つことができる
    // それぞれのファイルが別々のバイナリクレートになる

    // クレートは関連した機能を1つのスコープにまとめてその機能が複数のプロジェクト間で共有しやすいようにします
    // 例えば randクレート は乱数を生成する機能を提供します
    // randクレート を自分のプロジェクトのスコープに持ち込むことでこの機能をプロジェクトで使うことができます
    // また、クレートで名前の衝突も防ぐことができます
    // randクレート の 構造体Rang とは別にプロジェクトで Rang という構造体を作ることができます
    // コンパイラは rand::Rang と Rang で別々に考えるからです
// }